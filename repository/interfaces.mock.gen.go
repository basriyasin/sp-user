// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetProfileByID mocks base method.
func (m *MockRepositoryInterface) GetProfileByID(ctx context.Context, id int64) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByID", ctx, id)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByID indicates an expected call of GetProfileByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetProfileByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetProfileByID), ctx, id)
}

// GetProfileByPhone mocks base method.
func (m *MockRepositoryInterface) GetProfileByPhone(ctx context.Context, phone string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByPhone", ctx, phone)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByPhone indicates an expected call of GetProfileByPhone.
func (mr *MockRepositoryInterfaceMockRecorder) GetProfileByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByPhone", reflect.TypeOf((*MockRepositoryInterface)(nil).GetProfileByPhone), ctx, phone)
}

// SaveProfile mocks base method.
func (m *MockRepositoryInterface) SaveProfile(ctx context.Context, user User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfile", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfile indicates an expected call of SaveProfile.
func (mr *MockRepositoryInterfaceMockRecorder) SaveProfile(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).SaveProfile), ctx, user)
}

// UpdateLoginCount mocks base method.
func (m *MockRepositoryInterface) UpdateLoginCount(ctx context.Context, userID int64, loginCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginCount", ctx, userID, loginCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginCount indicates an expected call of UpdateLoginCount.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateLoginCount(ctx, userID, loginCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginCount", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateLoginCount), ctx, userID, loginCount)
}

// UpdateUserByID mocks base method.
func (m *MockRepositoryInterface) UpdateUserByID(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUserByID(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUserByID), ctx, user)
}
